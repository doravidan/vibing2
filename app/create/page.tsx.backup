'use client';

import { useState } from 'react';

export default function ChatPage() {
  const [messages, setMessages] = useState<Array<{ id: string; role: string; content: string }>>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [previewCode, setPreviewCode] = useState('');

  const extractCodeFromResponse = (content: string): string => {
    // Try different code block patterns
    const patterns = [
      /```html\s*([\s\S]*?)```/i,
      /```htm\s*([\s\S]*?)```/i,
      /```jsx\s*([\s\S]*?)```/i,
      /```tsx\s*([\s\S]*?)```/i,
      /```javascript\s*([\s\S]*?)```/i,
      /```js\s*([\s\S]*?)```/i,
      /```\s*(<!DOCTYPE[\s\S]*?)```/i,
      /```\s*(<html[\s\S]*?)```/i,
      /```\s*(<div[\s\S]*?)```/i,
      /```\s*(<!\[CDATA\[[\s\S]*?)```/i,
    ];

    for (const pattern of patterns) {
      const match = content.match(pattern);
      if (match) {
        return match[1].trim();
      }
    }

    if (content.includes('<!DOCTYPE') || content.includes('<html')) {
      const htmlMatch = content.match(/(<!DOCTYPE[\s\S]*<\/html>)/i) ||
                        content.match(/(<html[\s\S]*<\/html>)/i);
      if (htmlMatch) {
        return htmlMatch[1];
      }
    }

    return '';
  };

  const getSummaryFromResponse = (content: string): string => {
    // Extract code block language and show compact summary
    const codeBlockMatch = content.match(/```(\w+)/);
    const language = codeBlockMatch ? codeBlockMatch[1] : 'html';

    // Count lines of code
    const codeMatch = content.match(/```[\s\S]*?```/);
    const linesOfCode = codeMatch ? codeMatch[0].split('\n').length - 2 : 0;

    // Check if there's any text outside code blocks
    const textContent = content.replace(/```[\s\S]*?```/g, '').trim();

    if (linesOfCode > 0) {
      return `✓ Generated ${language.toUpperCase()} (${linesOfCode} lines)\n${textContent || 'Preview updated →'}`;
    }

    return textContent || '✓ Code generated - see preview';
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!inputValue.trim() || isLoading) return;

    const userMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/stream/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: [...messages, userMessage]
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let assistantMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: ''
      };

      setMessages(prev => [...prev, assistantMessage]);

      if (reader) {
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = decoder.decode(value);
          assistantMessage.content += chunk;

          setMessages(prev =>
            prev.map(msg =>
              msg.id === assistantMessage.id
                ? { ...msg, content: assistantMessage.content }
                : msg
            )
          );

          // Update preview with extracted code
          const code = extractCodeFromResponse(assistantMessage.content);
          if (code) {
            setPreviewCode(code);
          }
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="max-w-7xl mx-auto">
          <h1 className="text-2xl font-bold text-gray-900">QuickVibe 2.0</h1>
          <p className="text-sm text-gray-600">AI-powered web app generator with live preview</p>
        </div>
      </header>

      {/* Main Content - Split Screen */}
      <div className="flex-1 flex overflow-hidden">
        {/* Chat Panel */}
        <div className="w-1/2 flex flex-col border-r border-gray-200">
          {/* Messages Container */}
          <main className="flex-1 overflow-y-auto px-6 py-8">
            <div className="max-w-3xl mx-auto space-y-6">
              {messages.length === 0 && (
                <div className="text-center py-12">
                  <h2 className="text-xl font-semibold text-gray-700 mb-2">
                    Welcome to QuickVibe 2.0
                  </h2>
                  <p className="text-gray-500">
                    Describe your web app idea and I&apos;ll help you build it with live preview
                  </p>
                </div>
              )}

              {messages.map((message) => (
                <div
                  key={message.id}
                  className={`flex ${
                    message.role === 'user' ? 'justify-end' : 'justify-start'
                  }`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg px-4 py-3 ${
                      message.role === 'user'
                        ? 'bg-blue-600 text-white'
                        : 'bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200'
                    }`}
                  >
                    {message.role === 'assistant' ? (
                      <div className="flex items-start gap-2">
                        <span className="text-green-600 font-semibold">⚡</span>
                        <div className="flex-1 text-sm text-gray-700 font-medium whitespace-pre-wrap">
                          {getSummaryFromResponse(message.content)}
                        </div>
                      </div>
                    ) : (
                      <div className="text-sm whitespace-pre-wrap">
                        {message.content}
                      </div>
                    )}
                  </div>
                </div>
              ))}

              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg px-4 py-3">
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
                    </div>
                  </div>
                </div>
              )}

              {error && (
                <div className="bg-red-50 border border-red-200 rounded-lg px-4 py-3 text-red-800">
                  <p className="font-medium">Error:</p>
                  <p className="text-sm">{error}</p>
                </div>
              )}
            </div>
          </main>

          {/* Input Area */}
          <footer className="bg-white border-t border-gray-200 px-6 py-4">
            <form onSubmit={handleSubmit} className="max-w-3xl mx-auto">
              <div className="flex gap-3">
                <input
                  type="text"
                  value={inputValue}
                  onChange={(e) => setInputValue(e.target.value)}
                  placeholder="Describe your web app idea..."
                  disabled={isLoading}
                  className="flex-1 px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
                />
                <button
                  type="submit"
                  disabled={isLoading || inputValue.trim() === ''}
                  className="px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  {isLoading ? 'Generating...' : 'Send'}
                </button>
              </div>
            </form>
          </footer>
        </div>

        {/* Preview Panel */}
        <div className="w-1/2 flex flex-col bg-white">
          <div className="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <h3 className="text-lg font-semibold text-gray-900">Live Preview</h3>
            <p className="text-sm text-gray-600">See your generated code in action</p>
          </div>
          <div className="flex-1 p-6 overflow-auto">
            {previewCode ? (
              <iframe
                srcDoc={previewCode}
                className="w-full h-full border border-gray-300 rounded-lg bg-white"
                title="Preview"
                sandbox="allow-scripts"
              />
            ) : (
              <div className="flex items-center justify-center h-full text-gray-400">
                <div className="text-center">
                  <svg className="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <p className="text-lg">Preview will appear here</p>
                  <p className="text-sm mt-2">Ask me to create a web page and watch it come to life!</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}