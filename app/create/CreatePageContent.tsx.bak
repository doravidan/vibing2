'use client';

export const dynamic = 'force-dynamic';

import { useEffect, useState, useRef } from 'react';

import { useSession } from 'next-auth/react';
import { useRouter, useSearchParams } from 'next/navigation';
import { PROJECT_TYPES, ProjectType, selectAdditionalAgents, getProjectTypeConfig } from '@/lib/project-types';
import { streamSSE, createTimeoutSignal } from '@/lib/sse-parser';

interface Message {
  id: string;
  role: 'user' | 'assistant';
  content: string;
}

interface ProjectFile {
  path: string;
  content: string;
  language: string;
}

export default function CreatePageContent() {
  const { data: session } = useSession();
  const router = useRouter();
  const searchParams = useSearchParams() || { get: () => null };
  const projectIdParam = searchParams.get('projectId');
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // State
  const [projectType, setProjectType] = useState<ProjectType | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [previewCode, setPreviewCode] = useState('');
  const [previewUrl, setPreviewUrl] = useState('');
  const [sandboxId, setSandboxId] = useState('');
  const [projectFiles, setProjectFiles] = useState<ProjectFile[]>([]);
  const [activeAgents, setActiveAgents] = useState<string[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [progress, setProgress] = useState<string>('');

  // Auto-scroll to bottom when messages or progress change
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages, progress, error]);

  // Load existing project
  useEffect(() => {
    if (!projectIdParam || !session?.user?.id) return;

    const loadProject = async () => {
      try {
        const res = await fetch(`/api/projects/${projectIdParam}`);
        const data = await res.json();

        if (data.success && data.project) {
          const project = data.project;
          setMessages(project.messages.map((m: any) => ({
            id: m.id,
            role: m.role,
            content: m.content,
          })));
          setProjectType(project.projectType);
          setActiveAgents(JSON.parse(project.activeAgents || '[]'));

          // Extract code from last assistant message
          for (let i = project.messages.length - 1; i >= 0; i--) {
            const message = project.messages[i];
            if (message.role === 'assistant') {
              const codeMatch = message.content.match(/```html\n([\s\S]*?)\n```/);
              if (codeMatch) {
                setPreviewCode(codeMatch[1]);
                break;
              }
            }
          }
        }
      } catch (err) {
        console.error('Error loading project:', err);
        setError('Failed to load project');
      }
    };

    loadProject();
  }, [projectIdParam, session]);

  // Handle project type selection
  const handleProjectTypeSelect = (type: ProjectType) => {
    setProjectType(type);
    const config = getProjectTypeConfig(type);
    if (config) {
      setActiveAgents(config.baseAgents);
    }
  };

  // Handle form submit
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!inputValue.trim() || isLoading || !projectType) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      role: 'user',
      content: inputValue
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsLoading(true);
    setError(null);
    setProgress('Starting generation...');

    // Create timeout signal (5 minutes)
    const { signal, clear: clearTimeout } = createTimeoutSignal(5 * 60 * 1000);
    let assistantMessage = '';

    try {
      // Use robust SSE streaming with automatic retry
      await streamSSE({
        url: '/api/agent/stream',
        method: 'POST',
        body: {
          messages: [...messages, userMessage],
          projectType,
          agents: activeAgents,
        },
        signal,
        maxRetries: 3,
        retryDelay: 2000,

        onEvent: (event) => {
          // Handle both SSE format (data.type/data.data) and direct format (type/data)
          const eventType = event.data?.type || event.type;
          const eventData = event.data?.data || event.data;

          switch (eventType) {
            case 'progress':
              setProgress(eventData.message || 'Processing...');
              if (eventData.sandboxId) {
                setSandboxId(eventData.sandboxId);
              }
              if (eventData.previewUrl) {
                setPreviewUrl(eventData.previewUrl);
              }
              break;

            case 'message':
              // The stream endpoint sends text directly
              if (typeof event.data === 'string') {
                assistantMessage += event.data;
              } else if (eventData.delta && eventData.content) {
                assistantMessage += eventData.content;
              }
              break;

            case 'tool':
              console.log('Tool action:', eventData.action, eventData.file);
              setProgress(`üìù ${eventData.action}: ${eventData.file}`);
              break;

            case 'complete':
            case 'metrics':
              setProgress('‚úÖ Generation complete!');
              if (eventData.previewUrl) {
                setPreviewUrl(eventData.previewUrl);
              }
              if (eventData.sandboxId) {
                setSandboxId(eventData.sandboxId);
              }
              break;
          }
        },

        onError: (error) => {
          console.error('Stream error:', error);
          setError(error.message || 'Stream connection failed');
        },

        onComplete: () => {
          // Add assistant message
          if (assistantMessage) {
            const msg: Message = {
              id: Date.now().toString(),
              role: 'assistant',
              content: assistantMessage,
            };
            setMessages((prev) => [...prev, msg]);

            // Extract HTML code
            const codeMatch = assistantMessage.match(/```html\n([\s\S]*?)\n```/);
            if (codeMatch) {
              setPreviewCode(codeMatch[1]);
            }
          }

          setIsLoading(false);
          setProgress('');
        },
      });
    } catch (error: any) {
      console.error('Generation error:', error);
      setError(error.message || 'Failed to generate project');
      setIsLoading(false);
      setProgress('');
    } finally {
      clearTimeout();
    }
  };

  // Handle save project
  const handleSaveProject = async () => {
    try {
      const res = await fetch('/api/projects/save', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          projectId: projectIdParam || null,
          name: `${projectType} - ${new Date().toLocaleDateString()}`,
          projectType,
          activeAgents: JSON.stringify(activeAgents),
          messages,
          currentCode: previewCode,
        }),
      });

      const data = await res.json();

      if (data.success) {
        alert('Project saved successfully!');
        if (!projectIdParam && data.projectId) {
          router.push(`/create?projectId=${data.projectId}`);
        }
      } else {
        alert('Failed to save project');
      }
    } catch (error) {
      console.error('Save error:', error);
      alert('Error saving project');
    }
  };

  // Project type selection screen
  if (!projectType) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex items-center justify-center p-8">
        <div className="max-w-6xl w-full">
          <div className="text-center mb-12">
            <h1 className="text-5xl font-bold text-white mb-4">
              What would you like to create?
            </h1>
            <p className="text-xl text-white/60">
              Choose a project type to get started with AI-powered development
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {PROJECT_TYPES.map((type) => {
              const config = getProjectTypeConfig(type.id);
              return (
                <button
                  key={type.id}
                  onClick={() => handleProjectTypeSelect(type.id)}
                  className="group p-6 bg-white/10 backdrop-blur-xl border border-white/20 rounded-2xl hover:bg-white/20 hover:scale-105 transition-all duration-300"
                >
                  <div className="text-4xl mb-4">{type.emoji}</div>
                  <h3 className="text-xl font-bold text-white mb-2">{type.name}</h3>
                  <p className="text-white/60 text-sm mb-4">{type.description}</p>
                  <div className="flex flex-wrap gap-2">
                    {config?.baseAgents.slice(0, 3).map((agent) => (
                      <span
                        key={agent}
                        className="text-xs px-2 py-1 bg-purple-500/20 text-purple-400 rounded-full"
                      >
                        {agent}
                      </span>
                    ))}
                  </div>
                </button>
              );
            })}
          </div>

          <div className="text-center mt-8">
            <button
              onClick={() => router.push('/dashboard')}
              className="px-6 py-3 bg-white/10 text-white rounded-xl hover:bg-white/20 transition-all"
            >
              ‚Üê Back to Dashboard
            </button>
          </div>
        </div>
      </div>
    );
  }

  // Main create interface
  return (
    <div className="h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-gray-900 flex flex-col overflow-hidden">
      {/* Header */}
      <header className="relative z-20 backdrop-blur-xl bg-white/5 border-b border-white/10 px-6 py-4 flex-shrink-0">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-xl">Q</span>
            </div>
            <div>
              <h1 className="text-xl font-bold text-white">
                {getProjectTypeConfig(projectType)?.name}
              </h1>
              <p className="text-sm text-white/60">
                Powered by Daytona Sandbox
              </p>
            </div>
          </div>

          <div className="flex items-center gap-3">
            {messages.length > 0 && (
              <button
                onClick={handleSaveProject}
                className="px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white text-sm font-semibold rounded-lg hover:from-green-600 hover:to-emerald-600 shadow-lg"
              >
                Save Project
              </button>
            )}
            <button
              onClick={() => setProjectType(null)}
              className="px-4 py-2 text-sm backdrop-blur-lg bg-white/10 text-gray-300 hover:text-white border border-white/10 rounded-lg hover:bg-white/20 transition-all"
            >
              Change Type
            </button>
            <button
              onClick={() => router.push('/dashboard')}
              className="px-4 py-2 text-sm backdrop-blur-lg bg-white/10 text-gray-300 hover:text-white border border-white/10 rounded-lg hover:bg-white/20 transition-all"
            >
              ‚Üê Dashboard
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex-1 flex overflow-hidden">
        {/* Left Panel - Chat (30%) */}
        <div className="w-[30%] flex flex-col border-r border-white/10 backdrop-blur-xl bg-white/5">
          <main className="flex-1 overflow-y-auto px-4 py-6 space-y-4">
            {messages.length === 0 && (
              <div className="text-center py-12 backdrop-blur-lg bg-white/5 rounded-2xl border border-white/10">
                <h2 className="text-2xl font-semibold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent mb-2">
                  Describe your {getProjectTypeConfig(projectType)?.name.toLowerCase()}
                </h2>
                <p className="text-white/60 text-sm">
                  AI will generate it in a secure Daytona sandbox
                </p>
              </div>
            )}

            {messages.map((message) => (
              <div
                key={message.id}
                className={`p-4 rounded-xl ${
                  message.role === 'user'
                    ? 'bg-gradient-to-r from-purple-500/20 to-pink-500/20 border border-purple-500/30'
                    : 'bg-white/5 border border-white/10'
                }`}
              >
                <div className="text-xs text-white/60 mb-1 font-semibold">
                  {message.role === 'user' ? 'üë§ You' : 'ü§ñ Assistant'}
                </div>
                <div className="text-white text-sm whitespace-pre-wrap">
                  {message.content}
                </div>
              </div>
            ))}

            {isLoading && (
              <div className="p-4 bg-white/5 border border-white/10 rounded-xl">
                <div className="flex items-center gap-3">
                  <div className="animate-spin w-5 h-5 border-2 border-purple-500 border-t-transparent rounded-full"></div>
                  <div className="text-white/80 text-sm">{progress}</div>
                </div>
              </div>
            )}

            {error && (
              <div className="p-4 bg-red-500/20 border border-red-500/30 rounded-xl">
                <div className="text-red-400 text-sm">{error}</div>
              </div>
            )}

            {/* Scroll anchor */}
            <div ref={messagesEndRef} />
          </main>

          {/* Input Footer */}
          <footer className="backdrop-blur-xl bg-white/5 border-t border-white/10 px-6 py-4 flex-shrink-0">
            <form onSubmit={handleSubmit} className="flex gap-2">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Describe what you want to build..."
                disabled={isLoading}
                className="flex-1 bg-white/10 border border-white/20 rounded-xl px-4 py-3 text-white placeholder-white/40 focus:outline-none focus:border-purple-500/50 disabled:opacity-50"
              />
              <button
                type="submit"
                disabled={isLoading || !inputValue.trim()}
                className="px-6 py-3 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold rounded-xl hover:shadow-lg hover:shadow-purple-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isLoading ? '‚è≥' : 'üöÄ'}
              </button>
            </form>
          </footer>
        </div>

        {/* Right Panel - Preview (70%) */}
        <div className="w-[70%] flex flex-col backdrop-blur-xl bg-gray-900/50">
          <div className="border-b border-white/10 px-6 py-3 flex items-center justify-between">
            <h3 className="text-white font-semibold">Live Preview</h3>
            {sandboxId && (
              <div className="text-xs text-white/60">
                Sandbox: {sandboxId}
              </div>
            )}
          </div>

          <div className="flex-1 p-6 overflow-auto">
            {previewUrl ? (
              <div className="h-full flex flex-col">
                <div className="mb-4 p-3 bg-blue-500/20 border border-blue-500/30 rounded-xl">
                  <div className="text-blue-400 text-sm flex items-center gap-2">
                    <span>üåê Preview URL:</span>
                    <a
                      href={previewUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-300 hover:underline font-mono"
                    >
                      {previewUrl}
                    </a>
                  </div>
                </div>
                <iframe
                  src={previewUrl}
                  className="flex-1 w-full bg-white rounded-xl border border-white/20"
                  title="Preview"
                  sandbox="allow-scripts allow-same-origin allow-forms"
                />
              </div>
            ) : previewCode ? (
              <iframe
                srcDoc={previewCode}
                className="w-full h-full bg-white rounded-xl border border-white/20"
                title="Preview"
                sandbox="allow-scripts"
              />
            ) : (
              <div className="h-full flex items-center justify-center">
                <div className="text-center text-white/40">
                  <svg className="w-24 h-24 mx-auto mb-4 opacity-20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                  </svg>
                  <p className="text-lg">Preview will appear here</p>
                  <p className="text-sm">Start by describing your project</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}
